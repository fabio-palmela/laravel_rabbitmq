@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

AddElementTag("filas", $fontColor="black", $bgColor="#fdf1bc")
AddElementTag("services", $fontColor="black", $bgColor="#63ffc9")
AddElementTag("exchange", $fontColor="black", $bgColor="#ffc2c2")

' SET_SKETCH_STYLE($bgColor="lightblue", $fontColor="darkblue", $warningColor="darkred", $footerWarning="Sketch", $footerText="Created for discussion")


HIDE_STEREOTYPE()

SHOW_PERSON_OUTLINE()
LAYOUT_LEFT_RIGHT()

System_Boundary(simulador_consignado, "Simulador Consignado") {
  System(simulador_backend, "Simulador Service", "Laravel", "API do simulador.")
  Container(consumer_confirmacao, "Serviço de confirmação", "Laravel", "Recebe uma mensagem de confirmação com as parcelas cálculadas.", $tags="services")
}

System_Boundary(rabbitmq, "Sistema de Filas") {
  System(exchange, "Exchange", "Topic", "Router", $tags="exchange")

  ContainerQueue_Ext(queue_calcular_simulacao, "emprestimoConsignado", "ampq", "Fila", $tags="filas")
  ContainerQueue_Ext(queue_notifica_cooperado, "notifica_cooperado", "ampq", "Fila", $tags="filas")
  ContainerQueue_Ext(queue_notifica_ente, "notificaEnteConsignante", "ampq", "Fila", $tags="filas")
  ContainerQueue_Ext(queue_consignado_calculado, "consignadoCalculado", "ampq", "Fila", $tags="filas")
}
Container(consumer_calcular, "Serviço de cálculo das parcelas", "php", "Realiza o cálculo da simulação.", $tags="services")
Container(consumer_notifica_coop, "Serviço de notificação de cooperados", "php", "Notifica cooperado com parcelas da simulação.", $tags="services")
Container(consumer_notifica_ente, "Serviço de notificação do Ente Consignante", "php", "Notifica ente consignante para atualização da margem", $tags="services")


Rel_D(simulador_backend, exchange, "emprestimo.consignado.simulado")
Rel_D(simulador_backend, exchange, "emprestimo.consignado.margem.atualizada")
Rel_D(exchange, queue_consignado_calculado, "simulacao.emprestimo.consignado.calculado")
Rel_D(queue_consignado_calculado, consumer_confirmacao, "")
Rel_D(exchange, queue_notifica_cooperado, "simulacao.emprestimo.consignado.calculado")
Rel_D(queue_notifica_cooperado, consumer_notifica_coop, "")
Rel_D(exchange, queue_notifica_ente, "emprestimo.consignado.simulado")
Rel_D(queue_notifica_ente, consumer_notifica_ente, "")
Rel_D(exchange, queue_calcular_simulacao, "emprestimo.consignado.#")
Rel_D(queue_calcular_simulacao, consumer_calcular, "")
Rel_U(consumer_calcular, exchange, "simulacao.emprestimo.consignado.calculado")

@enduml
